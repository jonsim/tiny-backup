#!/usr/bin/env python
# (c) Copyright 2017 Jonathan Simmonds
#
# Licensed under the MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
"""
A micro backup manager, designed to be lightly configurable, simple and
unobtrusive. Useful for maintaining lightweight backups.

Maintained at https://github.com/jonsim/tiny-backup
"""
import argparse     # ArgumentParser
import ConfigParser # SafeConfigParser
import sys          # exit
import os.path      # isfile, expanduser


def main():
    """Main method."""
    # Handle command line.
    parser = argparse.ArgumentParser(description='A micro backup manager, '
                                     'designed to be lightly configurable, '
                                     'simple and unobtrusive. Useful for '
                                     'maintaining lightweight backups.')
    parser.add_argument('-c', '--config',
                        type=str, nargs='?',
                        default='~/.backup_config', const='~/.backup_config',
                        help='The location of the backup config file to read. '
                        'Defaults to %(default)s')
    parser.add_argument('-r', '--restore',
                        action='store_true', default=False,
                        help='Reverse the backup process to restore the local '
                        'file system from the backups at the given locations.')
    args = parser.parse_args()

    # Do it.
    if args.restore:
        raise NotImplementedError('Restore functionality is not implemented.')

    # Parse the config file.
    args.config = os.path.expanduser(args.config)
    if not os.path.isfile(args.config):
        raise OSError('Config file "%s" does not exist.' % (args.config))
    config = ConfigParser.SafeConfigParser()
    with open(args.config) as config_file:
        config.readfp(config_file)

    # TODO

# Entry point.
if __name__ == "__main__":
    main()
